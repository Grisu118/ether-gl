/*
 * Copyright (c) 2013 - 2014 Stefan Muller Arisona, Simon Schubiger, Samuel von Stachelski
 * Copyright (c) 2013 - 2014 FHNW & ETH Zurich
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *  Neither the name of FHNW / ETH Zurich nor the names of its contributors may
 *   be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package ch.fhnw.ether.formats.obj;

//import java.nio.IntBuffer;

/**
 * $Id$
 * <p>
 * Simple Texture containing the texture ID generated by OGL and various attributes. Can be called upon to bind and
 * paint itself. <br/>
 * This is a modified version of the Texture class from: org.lwjgl.examples.spaceinvaders.Texture
 * </p>
 * 
 * @author Brian Matzon <brian@matzon.dk>
 * @version $Revision$
 */
public class Texture {

	/** Texture id for this image (OpenGL) */
	private int textureID;

	/** Width of this image */
	private int width;

	/** Height of this image */
	private int height;

	/** Width ratio */
	private float widthRatio;

	/** Height ratio */
	private float heightRatio;

	/** Texture width */
	private int textureWidth;

	/** Texture heigth */
	private int textureHeigth;

	/**
	 * Creates a new Texture
	 * 
	 * @param textureID
	 *            Texture ID
	 * @param width
	 *            Width of image
	 * @param height
	 *            Height of image
	 */
	public Texture(int textureID, int width, int height) {
		this(textureID, width, height, 1.0f, 1.0f, width, height);
	}

	/**
	 * Creates a new Texture
	 * 
	 * @param textureID
	 *            Texture ID
	 * @param width
	 *            Width of image
	 * @param height
	 *            Height of image
	 * @param widthRatio
	 *            Ratio of texture width
	 * @param heightRatio
	 *            Ratio of texture height
	 * @param textureWidth
	 *            Actual width of texture
	 * @param textureHeight
	 *            Actual height of texture
	 */
	public Texture(int textureID, int width, int height, float widthRatio, float heightRatio, int textureWidth, int textureHeight) {
		this.textureID = textureID;
		this.width = width;
		this.height = height;
		this.widthRatio = widthRatio;
		this.heightRatio = heightRatio;
		this.textureWidth = textureWidth;
		this.textureHeigth = textureHeight;
	}

	/**
	 * @return Texture ID for this image
	 */
	public int getTextureID() {
		return textureID;
	}

	/**
	 * @return height of image
	 */
	public int getHeight() {
		return height;
	}

	/**
	 * @return width of image
	 */
	public int getWidth() {
		return width;
	}

	/**
	 * Returns a string representation of the image
	 */
	@Override
	public String toString() {
		return "Texture [" + textureID + ", " + width + ", " + height + ", " + textureWidth + ", " + textureHeigth + ", " + widthRatio + ", " + heightRatio
				+ "]";
	}
}